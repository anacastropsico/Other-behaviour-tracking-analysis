# -*- coding: utf-8 -*-
"""PyRat

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YNB57JNUs1Esqdwd2u4FZbk2Dgl53RcZ

Installing PyRAT and downloading data.
"""

#@title Installing PyRAT and downloading data.
!pip install pyratlib
!pip install wget
!pip install unrar
!git clone
!wget https://zenodo.org/record/5883277/files/PyRAT_dataset.rar?download=1
!unrar x "/content/PyRAT_dataset.rar?download=1"

import pyratlib as rat
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
from scipy import signal
from IPython.display import clear_output
import os

clear_output()

from google.colab import drive

drive.mount ('/content/drive')

"""Load data"""

#@title Load data

# Rato 1
df1_1 = pd.read_csv('/content/drive/My Drive/DLC/AP/VIDEOS/R20D25T3DLC_resnet50_APNov2shuffle1_100000_filtered.csv')

"""Input data examples and manipulations"""

#@title Input data example. This DataFrame is the output of DeepLabCut, without any changes
df1_1.head()

#@title If you have the bodyparts coordinates from other software (eg., Plexon) and want to use PyRAT, just default to DLC. Just add the necessary rows.
plx_tracking.head()

"""First adapt the original data (the "coords" column is not required for processing the data itself. It is removed within the PyRAT function, but is needed as a data structure and input for the functions to work well).#Para dados eletrofisiol√≥gicos"""

plx = pd.DataFrame(plx_tracking[['Frame_Number','X_pix','Y_pix']].values, columns=['coords','Bodypart','Bodypart'])
plx.head()

df_bp = pd.DataFrame([list([-1,'fucinho','funinho']),list([0,'x','y'])], columns=['coords','Bodypart','Bodypart'])
df_example = pd.concat([df_bp], ignore_index=True)
df_example.head()

"""Using in a Function (more examples in the Graph example)"""

rat.Trajectory(df1_1, bodyPart='fucinho', fontsize =15)

"""In case you want to use the functions in loop, the DataFrames must be stored inside a list"""

data_day1 = [df1_1,df2_1,df3_1,df4_1,df5_1,df6_1]
data_day2 = [df1_2,df2_2,df3_2,df4_2,df5_2,df6_2]
data_day3 = [df1_3,df2_3,df3_3,df4_3,df5_3,df6_3]

"""if you want to plot all data at once (for trajectory or heatmap). DataFrames must be concatenated."""

day_1 = data_day1[0]

for i in range(1,len(data_day1)):
    day_1 = day_1.append(data_day1[i][2:],ignore_index=True)

#@title Size of concatened data and single data
len(day_1),len(df1_1)

"""Graphics and metrics example

Trajectory(data, bodyPart, bodyPartBox = None, **kwargs):

    Parameters
    ----------
    data : pandas DataFrame
        The input tracking data.
    bodyPart : str
        Body part you want to plot the tracking.
    bodyPartBox : str
        The body part you want to use to estimate the limits of the environment,
        usually the base of the tail is the most suitable for this determination.
"""

rat.Trajectory(df1_1, bodyPart='fucinho', bodyPartBox='calda', fontsize =15)
# the terms passed in the function in quotes must be the same as in the DataFrame (Input Examples section)

"""Heatmap(data, bodyPart, **kwargs):

    Parameters
    ----------
    data : pandas DataFrame
        The input tracking data.
    bodyPart : str
        Body part you want to plot the heatmap.
    cmapType : str, optional
        matplotlib colormap.
    hSize : int, optional
        Determine the figure height size (x).
    wSize : int, optional
        Determine the figure width size (y).
    bins : int, optional
        Determine the heatmap resolution, the higher the value, the higher the
        resolution.
    vmax : int, optional
        Determine the heatmap scale.

"""

rat.Heatmap(df1_1, bodyPart = "fucinho", cmapType = 'viridis',
            hSize=6, wSize =8, bins = 50, fontsize=15, vmax= 60)
# the terms passed in the function in quotes must be the same as in the DataFrame (Input Examples section)

#@title Rat distance
filter = .3

print('Rat - 1')
print('Distance:',"{:.2f}".format(rat.MotionMetrics(df1_1, "calda", filter=filter,  fps=30).Distance.sum()/100),'meters')

"""HeadOrientation(data, step, head =  None, tail = None, **kwargs):

    Parameters
    ----------
    data : pandas DataFrame
        The input tracking data.
    step : int
        Step used in the data, will use a data point for each 'x' steps. The
        smaller the step, the greater the amount of arrows and the more difficult
        the interpretation.
    head : str
        Head coordinates to create the arrow. You can use data referring to another
        part of the body that you want to have as a reference for the line that will
        create the arrow. The angulation will be based on the arrow.
    tail : str
        Tail coordinates to create the arrow. You can use data referring to another
        part of the body that you want to have as a reference for the line that will
        create the arrow. The angulation will be based on the arrow.
    arrow_color : str, optional
        Determines the arrow color.
"""

rat.HeadOrientation(df1_1, step = 130, head = "fucinho", tail  = "calda", arrow_color = 'yellow')
# the terms passed in the function in quotes must be the same as in the DataFrame (Input Examples section)

"""Determining fields positions x and y (in pixels)

Creating the fields

FieldDetermination(Fields=1,plot=False,**kwargs):

    Parameters
    ----------
    posit : dict, optional
        A dictionary to pass objects with directions and not need to use input. It
        must contain a cache and 8 dice ('objt_type','center_x','center_y', 'radius',
        'a_x', 'a_y' , 'height', 'width'), 'obj_type' must be 0 or 1 (0 = circle and
        1 = rectangle). An example of this dictionary is in Section examples.
    plot : bool, optional
        Plot of objects created for ease of use. If you have difficulty in positioning
        the areas, this parameter will plot the graph where the areas were positioned.
        It needs to receive the DataFrame of the data and the part of the body that will
        be used to determine the limits of the environment (usually the tail).
    data : pandas DataFrame, optional
        The input tracking data.
    bodyPartBox : str, optional
        The body part you want to use to estimate the limits of the environment,
        usually the base of the tail is the most suitable for this determination.
"""

obj1 = rat.FieldDetermination(Fildes=2,plot=True,data=df1_1,bodyPartBox='calda', ret=False)
obj2 = rat.FieldDetermination(Fildes=2,plot=True,data=df1_1,bodyPartBox='calda', ret=False)
rat_code = ['R1D75A1']
# the terms passed in the function in quotes must be the same as in the DataFrame (Input Examples section)

area = {'rect1': [1,0  ,0  ,0 ,221,177,70,70],
        'rect2': [1,0  ,0  ,0 ,403,173,70,70]}

objetos = rat.FieldDetermination(posit = area,plot=True,data=df1_1,bodyPartBox='calda')

"""Calculating the animal interaction with each field created.

PlotInteraction(interactions, **kwargs)

    Parameters
    ----------
    data : pandas DataFrame
        The input tracking data.
    bodyPart : str
        Body part you want use as reference.
    fields : pandas DataFrame
        The DataFrame with the coordinates of the created fields (output of FieldDetermination()).
"""

interactions,_ = rat.Interaction(df1_1,'fucinho',objetos)
interactions.T

# the terms passed in the function in quotes must be the same as in the DataFrame (Input Examples section)

"""Interactions plot

PlotInteraction(interactions, **kwargs):
```
Parameters
----------
  interactions : pandas DataFrame
      The DataFrame with the interactions of the fields (output of Interaction()).

"""

rat.PlotInteraction(interactions)

"""Metrics os each animal using Reports

Reports(df_list,list_name,bodypart,fields=None,filter=0.3,fps=30):

```
Parameters
----------
    df_list : list
        List with all DataFrames.
    list_name : list
        List with names of each data.
    bodypart : str
        Body part you want use as reference.
    fields : pandas DataFrame
        The DataFrame with the coordinates of the created fields (output of FieldDetermination()).   
    filter : float
        Threshold to remove motion artifacts. Adjust according to the tracking
        quality and speed of what is moving.
    fps : int
        The recording frames per second.
```
"""

df_report_fucinho= rat.Reports(data_day1,list_name = 'Rat - 1',bodypart='fucinho',fields=objetos)
df_report_fucinho

df_report_centro= rat.Reports(data_day1,list_name = 'Rat - 1',bodypart='calda',fields=objetos)
df_report_centro